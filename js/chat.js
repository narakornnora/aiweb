(() => {
  const msgs = document.getElementById('msgs');
  const input = document.getElementById('input');
  const sendBtn = document.getElementById('sendBtn');
  const buildBtn = document.getElementById('buildBtn');
  const attachBtn = document.getElementById('attachBtn');
  const fileInput = document.getElementById('fileInput');

  const overlay = document.getElementById('overlay');
  const overlayText = document.getElementById('overlayText');

  /** state ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */
  const state = {
    history: [],          // {role:'user'|'assistant', text, files?}
    pendingFiles: [],     // File objects ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  };

  // --------- utility ----------
  function esc(s=''){ return s.replace(/[&<>"]/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;' }[c])); }
  function showOverlay(msg='‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‚Ä¶'){ overlayText.textContent = msg; overlay.classList.add('show'); }
  function hideOverlay(){ overlay.classList.remove('show'); }

  function addMessage(role, text, files=[]) {
    const wrap = document.createElement('div');
    wrap.className = `bubble ${role === 'user' ? 'me' : 'ai'}`;
    wrap.innerHTML = esc(text || '');
    if (files && files.length) {
      const box = document.createElement('div');
      box.className = 'thumbs';
      files.forEach(f => {
        if (f.previewUrl) {
          const img = document.createElement('img');
          img.src = f.previewUrl;
          img.alt = f.name || 'file';
          box.appendChild(img);
        } else {
          const span = document.createElement('span');
          span.textContent = f.name || '‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö';
          box.appendChild(span);
        }
      });
      wrap.appendChild(box);
    }
    msgs.appendChild(wrap);
    msgs.scrollTop = msgs.scrollHeight;
  }

  function assistantSay(text, withLink) {
    const wrap = document.createElement('div');
    wrap.className = 'bubble ai';
    wrap.innerHTML = esc(text);
    if (withLink && withLink.href) {
      const a = document.createElement('a');
      a.href = withLink.href;
      a.target = '_blank';
      a.rel = 'noopener';
      a.textContent = withLink.text || '‡∏î‡∏π‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå';
      a.className = 'link';
      a.style.display = 'inline-block';
      a.style.marginLeft = '8px';
      wrap.appendChild(a);
    }
    msgs.appendChild(wrap);
    msgs.scrollTop = msgs.scrollHeight;
  }

  function currentBrief() {
    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÜ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£) + ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
    const parts = [];
    const recent = state.history.slice(-10);
    recent.forEach(m => parts.push(`${m.role === 'user' ? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢'}: ${m.text}`));
    if (state.history.length === 0 && input.value.trim()) {
      parts.push(`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${input.value.trim()}`);
    }
    // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô; ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡πà‡∏≠ API ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
    const last = state.history[state.history.length - 1];
    const files = last?.files?.length ? last.files : state.pendingFiles;
    if (files && files.length) {
      parts.push('‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö: ' + files.map(f => f.name).join(', '));
    }
    return parts.join('\n');
  }

  // --------- actions ----------
  async function onSend() {
    const text = input.value.trim();
    if (!text && !state.pendingFiles.length) return;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const filesForMessage = [...state.pendingFiles];
    addMessage('user', text || '(‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå)', filesForMessage);
    state.history.push({ role: 'user', text, files: filesForMessage });
    state.pendingFiles = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡πÑ‡∏ß‡πâ
    input.value = '';

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö (‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠ /api/chat ‡πÑ‡∏î‡πâ)
    assistantSay('‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ú‡∏°‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° üëç');
  }

  async function onBuild() {
    const brief = currentBrief() || '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡πÇ‡∏ó‡∏ô‡∏≠‡∏∏‡πà‡∏ô ‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û';
    showOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‚Ä¶');

    buildBtn.disabled = true;
    sendBtn.disabled = true;

    try {
      const r = await fetch('/api/build', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ brief })
      });

      let data = null;
      try { data = await r.json(); } catch { /* ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ backend ‡∏™‡πà‡∏á HTML/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */ }

      if (!r.ok || !data?.ok) {
        const msg = data?.error || `Build API ${r.status}`;
        assistantSay('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + msg);
        return;
      }

      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
      const w = window.open(data.preview, '_blank');
      if (!w) {
        // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏õ‡πá‡∏≠‡∏õ‡∏≠‡∏±‡∏õ ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï
        assistantSay('‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏õ‡πá‡∏≠‡∏õ‡∏≠‡∏±‡∏õ ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î:', { href: data.preview, text: '‡∏î‡∏π‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå' });
      } else {
        assistantSay('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏ú‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö', { href: data.preview, text: '‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
      }
    } catch (e) {
      assistantSay('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + e.message);
    } finally {
      hideOverlay();
      buildBtn.disabled = false;
      sendBtn.disabled = false;
    }
  }

  // --------- events ----------
  sendBtn.addEventListener('click', onSend);
  buildBtn.addEventListener('click', onBuild);

  input.addEventListener('keydown', (e) => {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö IME (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) ‚Äî ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡∏™‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏à‡∏±‡∏ö Enter
    if (e.isComposing) return;
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      onSend();
    }
  });

  attachBtn.addEventListener('click', () => fileInput.click());
  fileInput.addEventListener('change', () => {
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ + ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    const files = Array.from(fileInput.files || []);
    files.forEach(f => {
      const item = { name: f.name, type: f.type, size: f.size };
      if (f.type.startsWith('image/')) {
        item.previewUrl = URL.createObjectURL(f);
      }
      state.pendingFiles.push(item);
    });
    // ‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏ñ‡∏ö‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏à‡∏ô‡∏Å‡∏î ‚Äú‡∏™‡πà‡∏á‚Äù)
    if (state.pendingFiles.length) {
      addMessage('ai', `üìé ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå ${state.pendingFiles.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏Å‡∏î ‚Äú‡∏™‡πà‡∏á‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå`);
    }
    // reset input ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
    fileInput.value = '';
  });

  // --------- greeting ----------
  assistantSay('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üëã\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û ‡πÇ‡∏ó‡∏ô‡∏≠‡∏∏‡πà‡∏ô cozy‚Äù ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏£ ‡∏Å‡∏î ‚Äú‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‚Äù ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö');
})();
