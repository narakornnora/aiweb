import React, { useState, useRef } from "react";

export default function AIChat() {
  const [messages, setMessages] = useState([
    { sender: "ai", text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üëã ‡∏ö‡∏≠‡∏Å‡∏ú‡∏°: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö/‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ß‡πá‡∏ö ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î ‚Äú‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‚Äù ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°" }
  ]);
  const [input, setInput] = useState("");
  const [answers, setAnswers] = useState({
    name: "", type: "", audience: "", promotion: "", contact: ""
  });
  const [images, setImages] = useState([]); // Data URLs
  const fileRef = useRef(null);

  const questions = [
    { key: "name", prompt: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö/‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?" },
    { key: "type", prompt: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß/‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤/‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å/‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠)?" },
    { key: "audience", prompt: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£?" },
    { key: "promotion", prompt: "‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏Ç‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?" },
    { key: "contact", prompt: "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô Line/‡πÇ‡∏ó‡∏£/‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà/‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)?" },
  ];

  const step = questions.findIndex(q => !answers[q.key]);
  const nextPrompt = step >= 0 ? questions[step].prompt : "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏ï‡πà‡∏≠/‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ";

  function pushMsg(sender, text, extra = {}) {
    setMessages(m => [...m, { sender, text, ...extra }]);
  }

  async function onSend() {
    const content = input.trim();
    if (!content) return;
    pushMsg("you", content);

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö step-by-step
    if (step >= 0) {
      const key = questions[step].key;
      setAnswers(a => ({ ...a, [key]: content }));
      setTimeout(() => pushMsg("ai", step + 1 < questions.length ? questions[step + 1].prompt : "‡πÇ‡∏≠‡πÄ‡∏Ñ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î ‚Äú‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‚Äù ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"), 150);
    } else {
      // ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏∏‡∏¢‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      setTimeout(() => pushMsg("ai", "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏î ‚Äú‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‚Äù ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ"), 150);
    }

    setInput("");
  }

  async function filesToDataURLs(fileList) {
    const tasks = [...fileList].map(
      f => new Promise((resolve, reject) => {
        const r = new FileReader();
        r.onload = () => resolve(r.result);
        r.onerror = reject;
        r.readAsDataURL(f);
      })
    );
    return Promise.all(tasks);
  }

  async function onPickFiles(e) {
    const files = e.target.files;
    if (!files || !files.length) return;
    const urls = await filesToDataURLs(files);
    setImages(prev => [...prev, ...urls]);

    // ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI
    pushMsg("you", `‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${urls.length} ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß`, { images: urls });
    setTimeout(() => pushMsg("ai", "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÅ‡∏ô‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"), 120);

    // reset ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
    e.target.value = "";
  }

  async function onGenerate() {
    const keyword = (answers.name || answers.type || "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á").trim();
    const title = answers.name || keyword;

    pushMsg("you", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üöÄ");
    pushMsg("ai", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‚Ä¶ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)");

    try {
      const res = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          keyword, title,
          info: answers,
          files: images  // ‡∏™‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û
        })
      });

      const data = await res.json();
      if (data?.url) {
        pushMsg("ai", `‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà\n${data.url}`);
        window.open(data.url, "_blank");
      } else if (data?.html) {
        // fallback ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å blob
        const blob = new Blob([data.html], { type: "text/html;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        pushMsg("ai", "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà");
        window.open(url, "_blank");
      } else {
        pushMsg("ai", "‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö üòÖ ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö");
      }
    } catch (err) {
      pushMsg("ai", "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö");
    }
  }

  return (
    <div className="w-full min-h-screen bg-neutral-900 text-white flex flex-col">
      <div className="max-w-3xl w-full mx-auto p-4 flex-1 flex flex-col">
        <h1 className="text-xl font-semibold mb-3">AI Builder</h1>
        <div className="flex-1 rounded-lg bg-neutral-800/60 border border-neutral-700 p-3 overflow-y-auto space-y-3">
          {messages.map((m, i) => (
            <div key={i} className={`flex ${m.sender === "ai" ? "" : "justify-end"}`}>
              <div className={`${m.sender === "ai" ? "bg-neutral-800" : "bg-blue-600"} px-3 py-2 rounded-2xl max-w-[80%] whitespace-pre-wrap`}>
                {m.text}
                {m.images?.length ? (
                  <div className="mt-2 grid grid-cols-3 gap-2">
                    {m.images.map((src, idx) => (
                      <img key={idx} src={src} alt={`upload-${idx}`} className="w-full h-24 object-cover rounded-md border border-neutral-700" />
                    ))}
                  </div>
                ) : null}
              </div>
            </div>
          ))}
          {!!images.length && (
            <div className="flex justify-end">
              <div className="bg-blue-600/70 px-3 py-2 rounded-2xl max-w-[80%]">
                <div className="text-sm opacity-90 mb-1">‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö:</div>
                <div className="grid grid-cols-3 gap-2">
                  {images.map((src, idx) => (
                    <img key={idx} src={src} alt={`staged-${idx}`} className="w-full h-24 object-cover rounded-md border border-neutral-700" />
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="mt-3 flex items-center gap-2">
          <input
            className="flex-1 bg-neutral-800 border border-neutral-700 rounded-lg px-3 py-2 outline-none"
            placeholder={nextPrompt}
            value={input}
            onChange={e => setInput(e.target.value)}
            onKeyDown={e => e.key === "Enter" ? onSend() : null}
          />
          <input
            ref={fileRef}
            type="file"
            accept="image/*"
            multiple
            className="hidden"
            onChange={onPickFiles}
          />
          <button
            onClick={() => fileRef.current?.click()}
            className="px-3 py-2 rounded-lg bg-neutral-700 hover:bg-neutral-600 border border-neutral-600"
            title="‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
          >
            ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ
          </button>
          <button
            onClick={onSend}
            className="px-3 py-2 rounded-lg bg-neutral-200 text-black hover:bg-white"
          >
            ‡∏™‡πà‡∏á
          </button>
          <button
            onClick={onGenerate}
            className="px-3 py-2 rounded-lg bg-emerald-500 hover:bg-emerald-400 text-black font-medium"
            title="‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
          >
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö
          </button>
        </div>
      </div>
    </div>
  );
}
